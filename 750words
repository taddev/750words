#!/usr/bin/env python
# 750words on the command line.
import os
import sys
import subprocess
import argparse
import datetime
try:
    import ConfigParser
except:
    # python 3
    import configparser as ConfigParser


def is_executable(program):
    try:
        subprocess.check_call(
            program,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        return True
    except:
        return False

GIT_INSTALLED = is_executable(['git', '--version'])


def is_number(string):
    try:
        float(string)
        return True
    except ValueError:
        return False


def is_git_repo(path):
    directory = os.path.dirname(path)
    args = ['git', 'rev-parse']
    with open(os.devnull, 'w') as f:
        return subprocess.Popen(args, stderr=f, cwd=directory).wait() == 0


def git_init(path):
    if not is_git_repo(path):
        args = ['git', 'init', path]
        process = subprocess.Popen(args, stdout=subprocess.PIPE)
        return process.communicate()[0]


def git_commit(filename, message='edit'):
    os.chdir(os.path.dirname(filename))
    subprocess.call(['git', 'add', os.path.basename(filename)])
    args = ['git', 'commit', '-m', message]
    process = subprocess.Popen(args, stdout=subprocess.PIPE)
    return process.communicate()[0]


def default_config_file():
    path = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
    return path + '/750words/config'


def default_data_directory():
    path = os.getenv('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))
    return path + '/750words'


def parse_config(config_path):
    config = ConfigParser.ConfigParser()

    if os.path.isfile(config_path):
        config.read(config_path)
    else:
        config_dir = os.path.dirname(config_path)
        if not os.path.isdir(config_dir):
            os.makedirs(config_dir)

        config.add_section('750words')
        config.set('750words', 'editor', os.getenv('EDITOR'))

        config.set('750words', 'extension', '.txt')

        directory = os.path.expanduser(default_data_directory())
        config.set('750words', 'directory', directory)
        if not os.path.exists(directory):
            os.makedirs(directory)

        with open(config_path, 'w') as f:
            config.write(f)

    return config


def word_count(path):
    try:
        with open(path) as f:
            return len(f.read().split())
    except IOError:
        return 0


def edit(path, editor):
    old_wordcount = word_count(path)

    try:
        subprocess.call([editor, path])
    except OSError:
        print("%s: not found. change your editor in the config." % editor)
        sys.exit(2)

    wordcount = word_count(path)
    difference = wordcount - old_wordcount
    if GIT_INSTALLED:
        message = 'Add %i words to %s for a total of %i.' % \
            (difference, os.path.basename(path), wordcount)
        git_commit(path, message)

    if wordcount < 750:
        print('You have written %i out of 750 words so far.' % wordcount)
    else:
        print('You wrote %i words today. Great job!' % wordcount)


def parse_date(number_or_string):
    '''parses a natural language date'''
    if not number_or_string:
        return datetime.datetime.today()

    one_day = datetime.timedelta(days=1)
    if is_number(number_or_string):
        number_or_string = int(number_or_string)
        return datetime.datetime.today() + (one_day * number_or_string)

    elif isinstance(number_or_string, str):
        if number_or_string.lower().strip() == 'today':
            return datetime.datetime.today()
        elif number_or_string.lower().strip() == 'yesterday':
            return datetime.datetime.today() - one_day
        elif number_or_string.lower().strip() == 'tomorrow':
            return datetime.datetime.today() + one_day

    return datetime.datetime.today()


def get_path(output_dir, extension, date=None):
    if not date:
        date = datetime.datetime.today()
    filename = "%04i-%02i-%02i" % (date.year, date.month, date.day) + extension
    path = os.path.join(output_dir, filename)
    return path


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('dates', help="the date of the text",
                        default=[None], nargs='*')
    parser.add_argument('-p', '--path', action='store_true',
                        help="print out path for use with external scripts")
    parser.add_argument('--config',
                        help='the location of the configuration file',
                        default=default_config_file())


    args = parser.parse_args()
    config = parse_config(args.config)

    if GIT_INSTALLED:
        directory = config.get('750words', 'directory')
        if not is_git_repo(directory):
            git_init(directory)

    for date in args.dates:
        path = get_path(
            config.get('750words', 'directory'),
            config.get('750words', 'extension'),
            parse_date(date)
        )
        if args.path:
            print(path)
        else:
            edit(path, config.get('750words', 'editor'))

if __name__ == "__main__":
    main()
